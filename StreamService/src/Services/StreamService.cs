using System;
using Shared.Interfaces;
using Shared.Interfaces.Clients;
using Shared.Models.Domain;
using Shared.Models.Stream;
using StreamDbHandler.Services;

namespace StreamService.src.Services;

public class StreamService : IStreamService
{
    private readonly IStreamDbHandlerClient _streamDbHandlerClient;
    private readonly ILogger<StreamService> _logger;

    private readonly IUserServiceClient _userServiceClient;

    private readonly ICacheService _cacheService;

    public StreamService(
        ILogger<StreamService> logger, 
        IStreamDbHandlerClient streamDbHandlerClient, 
        IUserServiceClient userServiceClient,
        ICacheService cacheService)
    {
        _logger = logger;
        _streamDbHandlerClient = streamDbHandlerClient;
        _userServiceClient = userServiceClient;
        _cacheService = cacheService;
    }

     public async Task<string> GenerateStreamKeyAsync(Guid id)
    {
        _logger.LogInformation("Generating stream key for stream ID {StreamId}", id);
        var stream = await _streamDbHandlerClient.GetStreamByIdAsync(id);
        if (stream == null)
        {
            _logger.LogWarning("Stream with ID {StreamId} not found", id);
            throw new KeyNotFoundException($"Stream with ID {id} not found");
        }

        // Generate a new stream key
        var streamKey = Guid.NewGuid().ToString();
        _logger.LogInformation("Generated new stream key {StreamKey} for stream ID {StreamId}", streamKey, id);

        // Store the raw stream key directly
        // We'll use this exact key for RTMP streaming
        stream.StreamKey = streamKey;
        
        // Update the stream URL for HLS playback - make sure this matches the HLS output
        // The URL should point to the .m3u8 file generated by NGINX RTMP
        stream.StreamUrl = "http://localhost:8080/hls/" + streamKey + ".m3u8";

        _logger.LogInformation("Updated stream {StreamId} with new stream key and URL", stream.Id);
        await _streamDbHandlerClient.UpdateStreamAsync(stream.Id, stream);
        
        return streamKey;
    }

    public async Task StartStreamAsync(string streamKey)
    {
        _logger.LogInformation("Starting stream with key {StreamKey}", streamKey);
        var streams = await _streamDbHandlerClient.GetAllStreamsAsync();

        // Find the stream with the given key by matching against StreamKey property
        var stream = streams.FirstOrDefault(s => s.StreamKey == streamKey);

        if (stream == null)
        {
            _logger.LogWarning("Stream with key {StreamKey} not found", streamKey);
            throw new KeyNotFoundException($"Stream with key {streamKey} not found");
        }

        // Mark the stream as active
        // You might want to update additional properties to indicate the stream is live
        stream.Views = 0; // Reset views or any other properties as needed
        _logger.LogInformation("Marked stream {StreamId} as active", stream.Id);
        if (!stream.UserId.HasValue)
        {
            _logger.LogError("Stream with key {StreamKey} does not have a user ID", streamKey);
            throw new InvalidOperationException($"Stream with key {streamKey} does not have a user ID.");
        }
        var user = await _userServiceClient.GetUserByIdAsync(stream.UserId.Value);
        if (user == null)
        {
            _logger.LogWarning("User with ID {UserId} not found for stream {StreamId}", stream.UserId, stream.Id);
            throw new KeyNotFoundException($"User with ID {stream.UserId} not found");
        }
        user.IsLive = true; // Mark user as live
        await _userServiceClient.UpdateUserAsync(user.Id, user); // Update user status
        _logger.LogInformation("User {UserId} marked as live", user.Id);
        await _cacheService.RemoveAsync("active_streams");
        _logger.LogInformation("Removed 'active_streams' from cache after starting stream");
    }

    public async Task EndStreamAsync(string streamKey)
    {
        _logger.LogInformation("Ending stream with key {StreamKey}", streamKey);
        var streams = await _streamDbHandlerClient.GetAllStreamsAsync();

        // Find the stream with the given key by matching against StreamKey property
        var stream = streams.FirstOrDefault(s => s.StreamKey == streamKey);

        if (stream == null)
        {
            _logger.LogWarning("Stream with key {StreamKey} not found", streamKey);
            throw new KeyNotFoundException($"Stream with key {streamKey} not found");
        }
        // We don't need to remove the StreamUrl or StreamKey, just mark the stream as inactive
        stream.Views = 0; // Reset views or any other properties as needed
        _logger.LogInformation("Marked stream {StreamId} as inactive", stream.Id);
        if (!stream.UserId.HasValue)
        {
            _logger.LogError("Stream with key {StreamKey} does not have a user ID", streamKey);
            throw new InvalidOperationException($"Stream with key {streamKey} does not have a user ID.");
        }

        var user = await _userServiceClient.GetUserByIdAsync(stream.UserId.Value);
        if (user == null)
        {
            _logger.LogWarning("User with ID {UserId} not found for stream {StreamId}", stream.UserId, stream.Id);
            throw new KeyNotFoundException($"User with ID {stream.UserId} not found");
        }

        user.IsLive = false; // Mark user as not live
        await _userServiceClient.UpdateUserAsync(user.Id, user); // Update user status
        _logger.LogInformation("User {UserId} marked as not live", user.Id);
        await _streamDbHandlerClient.UpdateStreamAsync(stream.Id, stream);
        _logger.LogInformation("Updated stream {StreamId} after ending", stream.Id);
        await _cacheService.RemoveAsync("active_streams");
        _logger.LogInformation("Removed 'active_streams' from cache after ending stream");
    }

    public async Task<IEnumerable<StreamDto>> GetReccommendedStreamsAsync(Guid userId, int count = 6)
    {
        _logger.LogInformation("Getting recommended streams for user {UserId} (count: {Count})", userId, count);
        var streams = await _streamDbHandlerClient.GetAllStreamsAsync();
        var user = await _userServiceClient.GetUserByIdAsync(userId);
        if (user == null)
        {
            _logger.LogWarning("User with ID {UserId} not found when getting recommendations", userId);
            throw new KeyNotFoundException($"User with ID {userId} not found");
        }

        var recommendedStreams = streams
            .Where(s => s.UserId != userId) 
            .OrderByDescending(s => s.Views)
            .Take(count)
            .ToList();

        var result = new List<StreamDto>();
        foreach (var stream in recommendedStreams)
        {
            if (stream.UserId.HasValue)
            {
                var streamUser = await _userServiceClient.GetUserByIdAsync(stream.UserId.Value);
                if (streamUser != null && streamUser.IsLive)
                {
                    result.Add(stream);   
                    _logger.LogInformation("Added stream {StreamId} to recommendations for user {UserId}", stream.Id, userId);
                }
            }
        }
        _logger.LogInformation("Returning {Count} recommended streams for user {UserId}", result.Count, userId);
        return result;
    }
}
